# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL –¥–ª—è Task Manager
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞—Å—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

Write-Host "=== –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL ===" -ForegroundColor Green
Write-Host ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥—ã
function Test-Command($command) {
    try {
        if (Get-Command $command -ErrorAction Stop) { return $true }
    } catch {
        return $false
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
if (-not (Test-Command "psql")) {
    Write-Host "‚ùå PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω!" -ForegroundColor Red
    Write-Host "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PostgreSQL —Å: https://www.postgresql.org/download/windows/" -ForegroundColor Yellow
    Write-Host "–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç" -ForegroundColor Yellow
    Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"
    exit 1
}

Write-Host "‚úÖ PostgreSQL –Ω–∞–π–¥–µ–Ω" -ForegroundColor Green

# –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
Write-Host "\nüìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:" -ForegroundColor Cyan
Write-Host "(–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ —á—Ç–æ –≤–≤–æ–¥–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç–µ Enter –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)" -ForegroundColor Gray
Write-Host ""

$pgHost = Read-Host "–•–æ—Å—Ç PostgreSQL (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: localhost)"
if ([string]::IsNullOrWhiteSpace($pgHost)) { $pgHost = "localhost" }

$pgPort = Read-Host "–ü–æ—Ä—Ç PostgreSQL (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5432)"
if ([string]::IsNullOrWhiteSpace($pgPort)) { $pgPort = "5432" }

$pgUser = Read-Host "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä PostgreSQL (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: postgres)"
if ([string]::IsNullOrWhiteSpace($pgUser)) { $pgUser = "postgres" }

$pgPassword = Read-Host "–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ PostgreSQL" -AsSecureString
$pgPasswordPlain = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($pgPassword))

if ([string]::IsNullOrWhiteSpace($pgPasswordPlain)) {
    Write-Host "‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!" -ForegroundColor Red
    Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
Write-Host "\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL..." -ForegroundColor Cyan

$env:PGPASSWORD = $pgPasswordPlain
try {
    $testConnection = psql -h $pgHost -p $pgPort -U $pgUser -d postgres -c "SELECT version();" 2>&1
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL" -ForegroundColor Red
        Write-Host "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:" -ForegroundColor Yellow
        Write-Host "- –•–æ—Å—Ç: $pgHost" -ForegroundColor Gray
        Write-Host "- –ü–æ—Ä—Ç: $pgPort" -ForegroundColor Gray
        Write-Host "- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $pgUser" -ForegroundColor Gray
        Write-Host "- –ü–∞—Ä–æ–ª—å: [—Å–∫—Ä—ã—Ç]" -ForegroundColor Gray
        Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"
        exit 1
    }
    Write-Host "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ" -ForegroundColor Green
} catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $($_.Exception.Message)" -ForegroundColor Red
    Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
Write-Host "\nüóÑÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö taskmanager..." -ForegroundColor Cyan

$checkDb = psql -h $pgHost -p $pgPort -U $pgUser -d postgres -t -c "SELECT 1 FROM pg_database WHERE datname='taskmanager';" 2>&1
if ($checkDb -match "1") {
    Write-Host "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö taskmanager —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" -ForegroundColor Green
    
    $recreate = Read-Host "–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö? (y/N)"
    if ($recreate -eq "y" -or $recreate -eq "Y") {
        Write-Host "üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..." -ForegroundColor Yellow
        $dropDb = psql -h $pgHost -p $pgPort -U $pgUser -d postgres -c "DROP DATABASE IF EXISTS taskmanager;" 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞" -ForegroundColor Green
        } else {
            Write-Host "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $dropDb" -ForegroundColor Red
            Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"
            exit 1
        }
    } else {
        Write-Host "‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" -ForegroundColor Blue
        $dbExists = $true
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
if (-not $dbExists) {
    Write-Host "\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö taskmanager..." -ForegroundColor Cyan
    
    $createDb = psql -h $pgHost -p $pgPort -U $pgUser -d postgres -c "CREATE DATABASE taskmanager WITH ENCODING='UTF8' LC_COLLATE='C' LC_CTYPE='C' TEMPLATE=template0;" 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö taskmanager —Å–æ–∑–¥–∞–Ω–∞" -ForegroundColor Green
    } else {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $createDb" -ForegroundColor Red
        Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"
        exit 1
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
Write-Host "\nüë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..." -ForegroundColor Cyan

$createAppUser = Read-Host "–°–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è taskmanager_user? (Y/n)"
if ($createAppUser -ne "n" -and $createAppUser -ne "N") {
    $appPassword = Read-Host "–ü–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è taskmanager_user (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: taskmanager123)"
    if ([string]::IsNullOrWhiteSpace($appPassword)) { $appPassword = "taskmanager123" }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    $checkUser = psql -h $pgHost -p $pgPort -U $pgUser -d postgres -t -c "SELECT 1 FROM pg_user WHERE usename='taskmanager_user';" 2>&1
    if ($checkUser -match "1") {
        Write-Host "‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å taskmanager_user —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" -ForegroundColor Yellow
        $dropUser = psql -h $pgHost -p $pgPort -U $pgUser -d postgres -c "DROP USER IF EXISTS taskmanager_user;" 2>&1
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    $createUser = psql -h $pgHost -p $pgPort -U $pgUser -d postgres -c "CREATE USER taskmanager_user WITH PASSWORD '$appPassword';" 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å taskmanager_user —Å–æ–∑–¥–∞–Ω" -ForegroundColor Green
        
        # –í—ã–¥–∞—á–∞ –ø—Ä–∞–≤
        $grantRights = psql -h $pgHost -p $pgPort -U $pgUser -d postgres -c "GRANT ALL PRIVILEGES ON DATABASE taskmanager TO taskmanager_user; ALTER USER taskmanager_user CREATEDB;" 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–¥–∞–Ω—ã" -ForegroundColor Green
            $useAppUser = $true
            $finalUser = "taskmanager_user"
            $finalPassword = $appPassword
        } else {
            Write-Host "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤: $grantRights" -ForegroundColor Yellow
            Write-Host "–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å postgres" -ForegroundColor Yellow
            $finalUser = $pgUser
            $finalPassword = $pgPasswordPlain
        }
    } else {
        Write-Host "‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $createUser" -ForegroundColor Yellow
        Write-Host "–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å postgres" -ForegroundColor Yellow
        $finalUser = $pgUser
        $finalPassword = $pgPasswordPlain
    }
} else {
    Write-Host "‚ÑπÔ∏è  –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å postgres" -ForegroundColor Blue
    $finalUser = $pgUser
    $finalPassword = $pgPasswordPlain
}

# –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞
Write-Host "\nüìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ .env —Ñ–∞–π–ª–∞..." -ForegroundColor Cyan

$databaseUrl = "postgresql://$finalUser`:$finalPassword@$pgHost`:$pgPort/taskmanager"

if (Test-Path ".env") {
    Write-Host "‚ö†Ô∏è  .env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" -ForegroundColor Yellow
    $updateEnv = Read-Host "–û–±–Ω–æ–≤–∏—Ç—å DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ? (Y/n)"
    if ($updateEnv -ne "n" -and $updateEnv -ne "N") {
        $envContent = Get-Content ".env"
        $envContent = $envContent -replace 'DATABASE_URL=".*"', "DATABASE_URL=\"$databaseUrl\""
        $envContent | Set-Content ".env"
        Write-Host "‚úÖ .env —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Green
    }
} else {
    if (Test-Path ".env.example") {
        Copy-Item ".env.example" ".env"
        $envContent = Get-Content ".env"
        $envContent = $envContent -replace 'DATABASE_URL=".*"', "DATABASE_URL=\"$databaseUrl\""
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Å–µ–∫—Ä–µ—Ç–∞
        $jwtSecret = -join ((1..32) | ForEach {[char]((65..90) + (97..122) + (48..57) | Get-Random)})
        $envContent = $envContent -replace 'JWT_SECRET=".*"', "JWT_SECRET=`"$jwtSecret`""
        
        $envContent | Set-Content ".env"
        Write-Host "‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" -ForegroundColor Green
    } else {
        Write-Host "‚ùå .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Red
        Write-Host "–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:" -ForegroundColor Yellow
        Write-Host "DATABASE_URL=\"$databaseUrl\"" -ForegroundColor Gray
    }
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –±–∞–∑–µ
Write-Host "\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ taskmanager..." -ForegroundColor Cyan

$env:PGPASSWORD = $finalPassword
$testAppConnection = psql -h $pgHost -p $pgPort -U $finalUser -d taskmanager -c "SELECT current_database(), current_user;" 2>&1
if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ taskmanager —É—Å–ø–µ—à–Ω–æ" -ForegroundColor Green
} else {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: $testAppConnection" -ForegroundColor Red
}

# –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
$env:PGPASSWORD = $null

# –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
Write-Host "\n=== –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===" -ForegroundColor Green
Write-Host "\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:" -ForegroundColor Cyan
Write-Host "   –•–æ—Å—Ç: $pgHost" -ForegroundColor Gray
Write-Host "   –ü–æ—Ä—Ç: $pgPort" -ForegroundColor Gray
Write-Host "   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: taskmanager" -ForegroundColor Gray
Write-Host "   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $finalUser" -ForegroundColor Gray
Write-Host "   –ü–∞—Ä–æ–ª—å: [–Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env]" -ForegroundColor Gray

Write-Host "\nüîó –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:" -ForegroundColor Cyan
Write-Host "   $databaseUrl" -ForegroundColor Gray

Write-Host "\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" -ForegroundColor Cyan
Write-Host "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ setup-windows.ps1 –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞" -ForegroundColor White
Write-Host "2. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ start-project.bat –¥–ª—è –∑–∞–ø—É—Å–∫–∞" -ForegroundColor White

Write-Host "\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!" -ForegroundColor Green
Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"