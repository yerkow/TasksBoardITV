const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function checkUsers() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
    
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        firstName: true,
        lastName: true,
        role: true,
        passwordHash: true,
        createdAt: true
      }
    });
    
    if (users.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n`);
    
    for (const user of users) {
      console.log(`üìß Email: ${user.email}`);
      console.log(`üë§ –ò–º—è: ${user.firstName} ${user.lastName}`);
      console.log(`üîë –†–æ–ª—å: ${user.role}`);
      console.log(`üîí –•–µ—à –ø–∞—Ä–æ–ª—è: ${user.passwordHash.substring(0, 20)}...`);
      console.log(`üìÖ –°–æ–∑–¥–∞–Ω: ${user.createdAt}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å 'password123'
      const isValidPassword = await bcrypt.compare('password123', user.passwordHash);
      console.log(`üîê –ü–∞—Ä–æ–ª—å 'password123' –ø–æ–¥—Ö–æ–¥–∏—Ç: ${isValidPassword ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
      
      console.log('‚îÄ'.repeat(50));
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkUsers();