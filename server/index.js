const express = require('express');
const https = require('https');
const http = require('http');
const cors = require('cors');
const helmet = require('helmet');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const { Server } = require('socket.io');
require('dotenv').config();

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

const app = express();
const PORT = process.env.PORT || 3001;

// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Socket.io
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: function (origin, callback) {
      // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
      if (!origin) {
        return callback(null, true);
      }
      
      // –†–∞–∑—Ä–µ—à–∞–µ–º localhost –∏ 127.0.0.1
      if (origin.includes('localhost') || origin.includes('127.0.0.1')) {
        return callback(null, true);
      }
      
      // –†–∞–∑—Ä–µ—à–∞–µ–º IP-–∞–¥—Ä–µ—Å–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
      if (origin.match(/^https?:\/\/(192\.168\.|10\.)/)) {
        return callback(null, true);
      }
      
      // –†–∞–∑—Ä–µ—à–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è URL
      if (process.env.FRONTEND_URL && origin === process.env.FRONTEND_URL) {
        return callback(null, true);
      }
      
      callback(null, true); // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    },
    methods: ['GET', 'POST']
  }
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userSockets = new Map(); // userId -> Set of socket ids

// Socket.io –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
io.on('connection', (socket) => {
  console.log('üîå –ù–æ–≤–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:', socket.id);
  
  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ WebSocket
  socket.on('authenticate', (token) => {
    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key');
      socket.userId = decoded.userId;
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∫–µ—Ç –≤ –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (!userSockets.has(decoded.userId)) {
        userSockets.set(decoded.userId, new Set());
      }
      userSockets.get(decoded.userId).add(socket.id);
      
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${decoded.userId} –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ WebSocket`);
      socket.emit('authenticated', { success: true });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      broadcastOnlineUsers();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebSocket:', error);
      socket.emit('authentication_error', { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  socket.on('ping', () => {
    console.log('üèì –ü–æ–ª—É—á–µ–Ω ping –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', socket.id);
    socket.emit('pong');
  });
  
  socket.on('disconnect', () => {
    console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:', socket.id);
    
    // –£–¥–∞–ª—è–µ–º —Å–æ–∫–µ—Ç –∏–∑ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (socket.userId && userSockets.has(socket.userId)) {
      userSockets.get(socket.userId).delete(socket.id);
      if (userSockets.get(socket.userId).size === 0) {
        userSockets.delete(socket.userId);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      broadcastOnlineUsers();
    }
  });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω
const broadcastOnlineUsers = async () => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const allUsers = await prisma.user.findMany({
      select: {
        id: true,
        firstName: true,
        lastName: true,
        patronymic: true,
        role: true
      }
    });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å–æ–º
    const usersWithStatus = allUsers.map(user => ({
      ...user,
      isOnline: userSockets.has(user.id)
    }));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    io.emit('users_status_updated', usersWithStatus);
    
    console.log('üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω:', 
      usersWithStatus.filter(u => u.isOnline).length, '–∏–∑', usersWithStatus.length);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
const notifyAll = (event, data) => {
  console.log(`üì° WebSocket broadcast: ${event} to ${io.engine.clientsCount} clients`);
  io.emit(event, data);
};

const notifyUser = (userId, event, data) => {
  const userSocketIds = userSockets.get(userId);
  if (userSocketIds && userSocketIds.size > 0) {
    console.log(`üì° WebSocket notify user ${userId}: ${event} to ${userSocketIds.size} sockets`);
    userSocketIds.forEach(socketId => {
      const socket = io.sockets.sockets.get(socketId);
      if (socket) {
        socket.emit(event, data);
      }
    });
  } else {
    console.log(`‚ö†Ô∏è User ${userId} not found in active sockets for event: ${event}`);
  }
};

// Middleware
app.use(helmet());
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
const corsOptions = {
  origin: function (origin, callback) {
    console.log('üåê CORS –∑–∞–ø—Ä–æ—Å –æ—Ç origin:', origin);
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
    if (!origin) {
      console.log('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω –∑–∞–ø—Ä–æ—Å –±–µ–∑ origin');
      return callback(null, true);
    }
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º localhost –∏ 127.0.0.1
    if (origin.includes('localhost') || origin.includes('127.0.0.1')) {
      console.log('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω localhost/127.0.0.1');
      return callback(null, true);
    }
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º IP-–∞–¥—Ä–µ—Å–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
    if (origin.match(/^https?:\/\/(192\.168\.|10\.)/)) {
      console.log('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω IP –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏');
      return callback(null, true);
    }
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è URL
    if (process.env.FRONTEND_URL && origin === process.env.FRONTEND_URL) {
      console.log('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω FRONTEND_URL');
      return callback(null, true);
    }
    
    console.log('‚ùå CORS –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è origin:', origin);
    callback(new Error('Not allowed by CORS'));
  },
  credentials: true
};

app.use(cors(corsOptions));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`üì® ${req.method} ${req.path}`, {
    origin: req.get('Origin'),
    userAgent: req.get('User-Agent'),
    ip: req.ip,
    body: req.method === 'POST' ? JSON.stringify(req.body).substring(0, 200) : undefined
  });
  next();
});

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const uploadsDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir, { recursive: true });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadsDir);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB
  }
});

// Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
  }
  
  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }
    req.user = user;
    next();
  });
};

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
app.use('/uploads', express.static(uploadsDir));

// === AUTH ROUTES ===

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/api/auth/register', async (req, res) => {
  console.log('üìù –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω');
  try {
    const { email, password, firstName, lastName, patronymic, role = 'USER' } = req.body;
    console.log('üìù –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', { email, firstName, lastName, role });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await prisma.user.findUnique({ where: { email } });
    if (existingUser) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', email);
      return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }
    
    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const passwordHash = await bcrypt.hash(password, 10);
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.create({
      data: {
        email,
        passwordHash,
        firstName: firstName || '',
        lastName: lastName || '',
        patronymic: patronymic || '',
        role: role.toUpperCase()
      }
    });
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', user.id);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      { 
        userId: user.id, 
        email: user.email, 
        role: user.role 
      },
      process.env.JWT_SECRET,
      { expiresIn: '24h' }
    );
    
    console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω');
    
    res.json({ 
      token, 
      user: { 
        id: user.id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        patronymic: user.patronymic,
        role: user.role
      } 
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
  }
});

// –í—Ö–æ–¥
app.post('/api/auth/login', async (req, res) => {
  console.log('üîê –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥ –ø–æ–ª—É—á–µ–Ω');
  try {
    const { email, password } = req.body;
    console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è:', email);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({ where: { email } });
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', email);
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isValidPassword = await bcrypt.compare(password, user.passwordHash);
    if (!isValidPassword) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è:', email);
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }
    
    console.log('‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      { 
        userId: user.id, 
        email: user.email, 
        role: user.role 
      },
      process.env.JWT_SECRET,
      { expiresIn: '24h' }
    );
    
    console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è –≤—Ö–æ–¥–∞');
    
    res.json({ 
      token, 
      user: { 
        id: user.id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        patronymic: user.patronymic,
        role: user.role
      } 
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/auth/me', authenticateToken, async (req, res) => {
  try {
    const user = await prisma.user.findUnique({
      where: { id: req.user.userId },
      select: {
        id: true,
        email: true,
        firstName: true,
        lastName: true,
        patronymic: true,
        role: true,
        createdAt: true,
        updatedAt: true
      }
    });
    
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json(user);
  } catch (error) {
    console.error('Get user error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
});

// === USER ROUTES ===

// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.put('/api/users/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const { role, firstName, lastName, patronymic } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const currentUser = await prisma.user.findUnique({
      where: { id: req.userId }
    });
    
    if (!currentUser || (currentUser.role !== 'ADMIN' && currentUser.role !== 'BOSS')) {
      return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }
    
    const updatedUser = await prisma.user.update({
      where: { id },
      data: {
        ...(role && { role }),
        ...(firstName && { firstName }),
        ...(lastName && { lastName }),
        ...(patronymic !== undefined && { patronymic })
      }
    });
    
    const { password: _, ...userWithoutPassword } = updatedUser;
    res.json(userWithoutPassword);
  } catch (error) {
    console.error('Update user error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/users', authenticateToken, async (req, res) => {
  try {
    const { role } = req.query;
    
    const where = role ? { role: role.toUpperCase() } : {};
    
    const users = await prisma.user.findMany({
      where,
      select: {
        id: true,
        email: true,
        firstName: true,
        lastName: true,
        patronymic: true,
        role: true,
        createdAt: true
      },
      orderBy: { createdAt: 'desc' }
    });
    
    res.json(users);
  } catch (error) {
    console.error('Get users error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–Ω–ª–∞–π–Ω/–æ—Ñ—Ñ–ª–∞–π–Ω)
app.get('/api/users/status', authenticateToken, async (req, res) => {
  try {
    const users = await prisma.user.findMany({
      select: {
        id: true,
        firstName: true,
        lastName: true,
        patronymic: true,
        role: true
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å–µ
    const usersWithStatus = users.map(user => ({
      ...user,
      isOnline: userSockets.has(user.id)
    }));
    
    res.json(usersWithStatus);
  } catch (error) {
    console.error('Get users status error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
  }
});

// === TASK ROUTES ===

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á
app.get('/api/tasks', authenticateToken, async (req, res) => {
  try {
    const { role, userId } = req.user;
    console.log('GET /api/tasks - User:', { role, userId });
    
    let where = {};
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ boss –∏–ª–∏ admin, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ –∑–∞–¥–∞—á–∏
    if (role !== 'BOSS' && role !== 'ADMIN') {
      where.assigneeId = userId;
    }
    
    console.log('Query where condition:', where);
    
    const tasks = await prisma.task.findMany({
      where,
      include: {
        assignee: {
          select: {
            id: true,
            email: true,
            firstName: true,
            lastName: true,
            patronymic: true
          }
        },
        creator: {
          select: {
            id: true,
            email: true,
            firstName: true,
            lastName: true
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    });
    
    console.log('Found tasks:', tasks.length);
    console.log('Tasks data:', tasks);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const tasksWithRussianLabels = tasks.map(task => ({
      ...task,
      status: mapStatusToRussian(task.status),
      priority: mapPriorityToRussian(task.priority)
    }));
    
    res.json(tasksWithRussianLabels);
  } catch (error) {
    console.error('Get tasks error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á' });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
app.post('/api/tasks', authenticateToken, async (req, res) => {
  try {
    const { title, description, priority, deadline, assigneeId, assigneeName } = req.body;
    
    const task = await prisma.task.create({
      data: {
        title,
        description: description || '',
        priority: priority?.toUpperCase() || 'MEDIUM',
        deadline: deadline ? new Date(deadline) : null,
        status: 'ASSIGNED',
        assigneeId,
        assigneeName,
        createdBy: req.user.userId
      },
      include: {
        assignee: {
          select: {
            id: true,
            email: true,
            firstName: true,
            lastName: true,
            patronymic: true
          }
        }
      }
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const taskWithRussianLabels = {
      ...task,
      status: mapStatusToRussian(task.status),
      priority: mapPriorityToRussian(task.priority)
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
    notifyAll('task_created', taskWithRussianLabels);
    
    res.json(taskWithRussianLabels);
  } catch (error) {
    console.error('Create task error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
app.put('/api/tasks/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const updates = req.body;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (updates.status) {
      updates.status = updates.status.toUpperCase();
    }
    if (updates.priority) {
      updates.priority = updates.priority.toUpperCase();
    }
    if (updates.deadline) {
      updates.deadline = new Date(updates.deadline);
    }
    
    const task = await prisma.task.update({
      where: { id },
      data: {
        ...updates,
        updatedBy: req.user.userId
      },
      include: {
        assignee: {
          select: {
            id: true,
            email: true,
            firstName: true,
            lastName: true,
            patronymic: true
          }
        }
      }
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const taskWithRussianLabels = {
      ...task,
      status: mapStatusToRussian(task.status),
      priority: mapPriorityToRussian(task.priority)
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
    console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è task_updated –¥–ª—è –∑–∞–¥–∞—á–∏:', task.id, '—Å—Ç–∞—Ç—É—Å:', taskWithRussianLabels.status);
    notifyAll('task_updated', taskWithRussianLabels);
    
    res.json(taskWithRussianLabels);
  } catch (error) {
    console.error('Update task error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏' });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
app.delete('/api/tasks/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    
    await prisma.task.delete({
      where: { id }
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
    notifyAll('task_deleted', { taskId: id });
    
    res.json({ message: '–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞' });
  } catch (error) {
    console.error('Delete task error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏' });
  }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–¥–∞—á–∏
app.post('/api/tasks/:id/upload', authenticateToken, upload.single('file'), async (req, res) => {
  try {
    const { id } = req.params;
    const { comment, textContent, reportType } = req.body;
    
    console.log('Upload request:', { id, reportType, hasFile: !!req.file, hasTextContent: !!textContent });
    
    let reportFile;
    
    if (reportType === 'text' && textContent) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
      reportFile = {
        type: 'text',
        content: textContent,
        uploadedAt: new Date().toISOString(),
        comment: comment || '',
        isTextReport: true
      };
    } else if (req.file) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
      const fileUrl = `/uploads/${req.file.filename}`;
      reportFile = {
        type: 'file',
        name: req.file.originalname,
        url: fileUrl,
        uploadedAt: new Date().toISOString(),
        size: req.file.size,
        comment: comment || '',
        isTextReport: false
      };
    } else {
      console.log('No file or text content provided');
      return res.status(400).json({ error: '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∏ —Ñ–∞–π–ª, –Ω–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç' });
    }
    
    const task = await prisma.task.update({
      where: { id },
      data: {
        reportFile,
        status: 'UNDER_REVIEW', // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"
        updatedBy: req.user.userId
      },
      include: {
        assignee: {
          select: {
            id: true,
            email: true,
            firstName: true,
            lastName: true,
            patronymic: true
          }
        }
      }
    });
    
    console.log('Task updated successfully:', task.id);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const taskWithRussianLabels = {
      ...task,
      status: mapStatusToRussian(task.status),
      priority: mapPriorityToRussian(task.priority)
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
    console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è task_updated –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞, –∑–∞–¥–∞—á–∞:', task.id, '—Å—Ç–∞—Ç—É—Å:', taskWithRussianLabels.status);
    notifyAll('task_updated', {
      ...taskWithRussianLabels,
      reportFile: {
        ...taskWithRussianLabels.reportFile,
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞, —á—Ç–æ –æ—Ç—á–µ—Ç –±—ã–ª —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω
        isNew: true
      }
    });
    
    res.json({ task: taskWithRussianLabels, fileUrl: reportFile.url || null });
  } catch (error) {
    console.error('File upload error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞' });
  }
});

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞
app.get('/api/tasks/:id/download', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const task = await prisma.task.findUnique({ where: { id } });

    if (!task || !task.reportFile) {
      return res.status(404).json({ error: '–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const reportFile = task.reportFile;

    if (reportFile.isTextReport) {
      // –û—Ç–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
      res.setHeader('Content-Disposition', 'attachment; filename="report.txt"');
      res.setHeader('Content-Type', 'text/plain; charset=utf-8');
      res.send(reportFile.content);
    } else {
      // –û—Ç–¥–∞–µ–º —Ñ–∞–π–ª
      const filePath = path.join(__dirname, reportFile.url);
      if (fs.existsSync(filePath)) {
        res.download(filePath, reportFile.name);
      } else {
        res.status(404).json({ error: '–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
      }
    }
  } catch (error) {
    console.error('File download error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞' });
  }
});

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const mapStatusToRussian = (status) => {
  const statusMap = {
    'ASSIGNED': '–Ω–∞–∑–Ω–∞—á–µ–Ω–æ',
    'IN_PROGRESS': '–≤ —Ä–∞–±–æ—Ç–µ',
    'UNDER_REVIEW': '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
    'COMPLETED': '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
    'REVISION': '–¥–æ—Ä–∞–±–æ—Ç–∫–∞'
  };
  return statusMap[status] || status;
};

const mapPriorityToRussian = (priority) => {
  const priorityMap = {
    'LOW': '–Ω–∏–∑–∫–∏–π',
    'MEDIUM': '—Å—Ä–µ–¥–Ω–∏–π',
    'HIGH': '–≤—ã—Å–æ–∫–∏–π'
  };
  return priorityMap[priority] || priority;
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

// 404 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
app.use('*', (req, res) => {
  res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP
const getLocalIP = () => {
  const os = require('os');
  const interfaces = os.networkInterfaces();
  for (const name of Object.keys(interfaces)) {
    for (const iface of interfaces[name]) {
      if (iface.family === 'IPv4' && !iface.internal) {
        return iface.address;
      }
    }
  }
  return 'localhost';
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
const startServers = () => {
  const HTTP_PORT = PORT;
  const HTTPS_PORT = parseInt(PORT) + 1; // HTTPS –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—Ç—É
  const localIP = getLocalIP();
  
  // –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ —Å Socket.io
  server.listen(HTTP_PORT, '0.0.0.0', () => {
    console.log(`üöÄ HTTP —Å–µ—Ä–≤–µ—Ä —Å WebSocket –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${HTTP_PORT}`);
    console.log(`üìä API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${HTTP_PORT}/api`);
    console.log(`üìä API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://${localIP}:${HTTP_PORT}/api`);
    console.log(`üîå WebSocket –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ws://localhost:${HTTP_PORT}`);
    console.log(`üîå WebSocket –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ws://${localIP}:${HTTP_PORT}`);
  });
  
  // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTPS —Å–µ—Ä–≤–µ—Ä–∞
  const certsPath = path.join(__dirname, 'certs');
  const keyPath = path.join(certsPath, 'key.pem');
  const certPath = path.join(certsPath, 'cert.pem');
  
  if (fs.existsSync(keyPath) && fs.existsSync(certPath)) {
    try {
      const httpsOptions = {
        key: fs.readFileSync(keyPath),
        cert: fs.readFileSync(certPath)
      };
      
      const httpsServer = https.createServer(httpsOptions, app);
      httpsServer.listen(HTTPS_PORT, '0.0.0.0', () => {
        console.log(`üîê HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${HTTPS_PORT}`);
        console.log(`üìä –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ API: https://localhost:${HTTPS_PORT}/api`);
        console.log(`üìä –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ API: https://${localIP}:${HTTPS_PORT}/api`);
        console.log('');
        console.log('‚úÖ HTTPS –≤–∫–ª—é—á–µ–Ω - –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!');
        console.log('‚ö†Ô∏è  –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –±—Ä–∞—É–∑–µ—Ä –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ.');
        console.log('   –ù–∞–∂–º–∏—Ç–µ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ" ‚Üí "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.');
        console.log('');
        console.log('üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:');
        console.log(`   ‚ûú  API HTTP:  http://localhost:${HTTP_PORT}/api`);
        console.log(`   ‚ûú  API HTTP:  http://${localIP}:${HTTP_PORT}/api`);
        console.log(`   ‚ûú  API HTTPS: https://localhost:${HTTPS_PORT}/api`);
        console.log(`   ‚ûú  API HTTPS: https://${localIP}:${HTTPS_PORT}/api`);
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTPS —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
      console.log('üí° –ó–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ HTTP —Å–µ—Ä–≤–µ—Ä. –î–ª—è HTTPS –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: node generate-ssl.js');
    }
  } else {
    console.log('‚ö†Ô∏è  SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    console.log('üí° –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è HTTPS –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: node generate-ssl.js');
    console.log('üì± –ë–µ–∑ HTTPS –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥—É—Ç!');
  }
  
  console.log('');
  console.log('üì± –î–ª—è —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS –≤–µ—Ä—Å–∏—é!');
};

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
startServers();

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  await prisma.$disconnect();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  await prisma.$disconnect();
  process.exit(0);
});