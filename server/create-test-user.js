const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function createTestUsers() {
  try {
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const existingUsers = await prisma.user.findMany();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${existingUsers.length}`);
    
    if (existingUsers.length > 0) {
      console.log('üë• –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
      existingUsers.forEach(user => {
        console.log(`  - ${user.email} (${user.role}) - ${user.firstName} ${user.lastName}`);
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    const testUsers = [
      {
        email: 'boss@company.com',
        password: 'boss123',
        firstName: '–ò–≤–∞–Ω',
        lastName: '–ü–µ—Ç—Ä–æ–≤',
        patronymic: '–°–µ—Ä–≥–µ–µ–≤–∏—á',
        role: 'BOSS'
      },
      {
        email: 'admin@company.com',
        password: 'admin123',
        firstName: '–ú–∞—Ä–∏—è',
        lastName: '–ò–≤–∞–Ω–æ–≤–∞',
        patronymic: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞',
        role: 'ADMIN'
      },
      {
        email: 'user@company.com',
        password: 'user123',
        firstName: '–ê–ª–µ–∫—Å–µ–π',
        lastName: '–°–∏–¥–æ—Ä–æ–≤',
        patronymic: '–ú–∏—Ö–∞–π–ª–æ–≤–∏—á',
        role: 'USER'
      }
    ];
    
    for (const userData of testUsers) {
      const existingUser = await prisma.user.findUnique({
        where: { email: userData.email }
      });
      
      if (!existingUser) {
        const passwordHash = await bcrypt.hash(userData.password, 10);
        
        const user = await prisma.user.create({
          data: {
            email: userData.email,
            passwordHash,
            firstName: userData.firstName,
            lastName: userData.lastName,
            patronymic: userData.patronymic,
            role: userData.role
          }
        });
        
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email} (${user.role})`);
        console.log(`   –ü–∞—Ä–æ–ª—å: ${userData.password}`);
      } else {
        console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
    }
    
    console.log('\nüéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∏—Å–ø–æ–ª—å–∑—É—è:');
    console.log('üëë –ù–∞—á–∞–ª—å–Ω–∏–∫: boss@company.com / boss123');
    console.log('üîß –ê–¥–º–∏–Ω: admin@company.com / admin123');
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user@company.com / user123');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createTestUsers();