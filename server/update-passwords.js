const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function updatePasswords() {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');
    
    const testUsers = [
      { email: 'boss@company.com', password: 'password123' },
      { email: 'admin@company.com', password: 'password123' },
      { email: 'user@company.com', password: 'password123' }
    ];
    
    for (const testUser of testUsers) {
      console.log(`üîê –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è: ${testUser.email}`);
      
      // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
      const passwordHash = await bcrypt.hash(testUser.password, 10);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const updatedUser = await prisma.user.update({
        where: { email: testUser.email },
        data: { passwordHash },
        select: {
          id: true,
          email: true,
          firstName: true,
          lastName: true,
          role: true
        }
      });
      
      console.log(`‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è: ${updatedUser.firstName} ${updatedUser.lastName} (${updatedUser.role})`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
      const isValid = await bcrypt.compare(testUser.password, passwordHash);
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è: ${isValid ? '‚úÖ –£–°–ü–ï–®–ù–û' : '‚ùå –û–®–ò–ë–ö–ê'}`);
      console.log('‚îÄ'.repeat(50));
    }
    
    console.log('\nüéâ –í—Å–µ –ø–∞—Ä–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
    console.log('\nüìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('‚Ä¢ boss@company.com / password123');
    console.log('‚Ä¢ admin@company.com / password123');
    console.log('‚Ä¢ user@company.com / password123');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª–µ–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

updatePasswords();