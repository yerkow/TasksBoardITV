import { useState, useEffect, useRef, useCallback } from 'react';
import { apiClient, Task, mapStatusFromRussian, mapPriorityFromRussian } from '../lib/api';
import { TaskStatus, TaskPriority, isRussianStatus, isRussianPriority } from '../lib/types';
import { useAuth } from '@/contexts/AuthContext';
import { notificationSound } from '../utils/notifications';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Task –∏–∑ api.ts
export type { Task } from '../lib/api';

export const useTasks = () => {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { user } = useAuth();
  const isUserInteracting = useRef(false);
  const refreshTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const previousTaskIds = useRef<Set<string>>(new Set());
  const lastFetchTime = useRef<number>(0);
  const pollIntervalRef = useRef<NodeJS.Timeout | null>(null);

  const fetchTasks = useCallback(async (showLoading = true) => {
    if (!user) {
      setTasks([]);
      setLoading(false);
      return;
    }

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ —Å–µ–∫—É–Ω–¥—É)
    const now = Date.now();
    if (now - lastFetchTime.current < 1000 && !showLoading) {
      return;
    }
    lastFetchTime.current = now;

    if (showLoading) {
      setLoading(true);
    }
    setError(null);

    try {
      const tasksData = await apiClient.getTasks();
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let filteredTasks = tasksData;
      if (user.role === 'USER') {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö –∑–∞–¥–∞—á–∏
        filteredTasks = tasksData.filter(task => task.assigneeId === user.id);
      }
      // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –±–æ—Å—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      if (!showLoading) {
        checkForTaskChanges(filteredTasks);
      }
      
      setTasks(filteredTasks);
    } catch (error) {
      console.error('Error fetching tasks:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á');
    } finally {
      if (showLoading) {
        setLoading(false);
      }
    }
  }, [user]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–¥–∞—á–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const checkForTaskChanges = useCallback((newTasks: Task[]) => {
    if (!user) return;

    const currentTaskIds = new Set(tasks.map(t => t.id));
    const newTaskIds = new Set(newTasks.map(t => t.id));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    newTasks.forEach(task => {
      if (!currentTaskIds.has(task.id)) {
        console.log('üîÑ Real-time: –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞:', task.title);
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è)
        if (user.role === 'USER' && task.assigneeId === user.id) {
          notificationSound.playNewTaskSound();
          notificationSound.showNotification(
            '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞',
            `–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: ${task.title}`
          );
        }
        
        // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –±–æ—Å—Å–æ–≤ —Ç–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö
        if ((user.role === 'ADMIN' || user.role === 'BOSS') && task.assigneeId !== user.id) {
          notificationSound.showNotification(
            '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞',
            `–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: ${task.title} –¥–ª—è ${task.assigneeName}`
          );
        }
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    newTasks.forEach(newTask => {
      const oldTask = tasks.find(t => t.id === newTask.id);
      if (oldTask && oldTask.status !== newTask.status) {
        console.log('üîÑ Real-time: –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', newTask.title, '–°—Ç–∞—Ç—É—Å:', newTask.status);
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ —Ä–æ–ª–µ–π
        if (user) {
          // –î–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –µ–≥–æ –∑–∞–¥–∞—á–∞—Ö
          if (newTask.assigneeId === user.id) {
            if (newTask.status === '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ') {
              notificationSound.playSuccessSound();
              notificationSound.showNotification(
                '–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                `–ó–∞–¥–∞—á–∞ "${newTask.title}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`
              );
            } else if (newTask.status === '–¥–æ—Ä–∞–±–æ—Ç–∫–∞') {
              notificationSound.showNotification(
                '–ó–∞–¥–∞—á–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É',
                `–ó–∞–¥–∞—á–∞ "${newTask.title}" —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏`
              );
            }
          }
          
          // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –±–æ—Å—Å–æ–≤ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
          if ((user.role === 'ADMIN' || user.role === 'BOSS') && newTask.assigneeId !== user.id) {
            if (newTask.status === '–≤ —Ä–∞–±–æ—Ç–µ') {
              notificationSound.showNotification(
                '–ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É',
                `${newTask.assigneeName} –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É: ${newTask.title}`
              );
            } else if (newTask.status === '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ') {
              notificationSound.showNotification(
                '–û—Ç—á–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω',
                `${newTask.assigneeName} –∑–∞–≥—Ä—É–∑–∏–ª –æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞—á–µ: ${newTask.title}`
              );
            }
          }
        }
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    tasks.forEach(task => {
      if (!newTaskIds.has(task.id)) {
        console.log('üîÑ Real-time: –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞:', task.id);
      }
    });
  }, [tasks, user]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ real-time polling
  const startPolling = useCallback(() => {
    if (pollIntervalRef.current) {
      clearInterval(pollIntervalRef.current);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä—ã—Ö real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    pollIntervalRef.current = setInterval(() => {
      if (!isUserInteracting.current) {
        fetchTasks(false);
      }
    }, 1000);
  }, [fetchTasks]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling
  const stopPolling = useCallback(() => {
    if (pollIntervalRef.current) {
      clearInterval(pollIntervalRef.current);
      pollIntervalRef.current = null;
    }
  }, []);

  const clearRefreshTimeout = useCallback(() => {
    if (refreshTimeoutRef.current) {
      clearTimeout(refreshTimeoutRef.current);
      refreshTimeoutRef.current = null;
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const pausePolling = useCallback(() => {
    isUserInteracting.current = true;
    clearRefreshTimeout();
  }, [clearRefreshTimeout]);

  const resumePolling = useCallback(() => {
    isUserInteracting.current = false;
  }, []);

  useEffect(() => {
    if (user) {
      fetchTasks(true); // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ
      startPolling(); // –ó–∞–ø—É—Å–∫–∞–µ–º real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    } else {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –æ—á–∏—â–∞–µ–º –∑–∞–¥–∞—á–∏ –∏ —Ç–∞–π–º–µ—Ä—ã
      setTasks([]);
      clearRefreshTimeout();
      stopPolling();
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      clearRefreshTimeout();
      stopPolling();
    };
  }, [user, fetchTasks, clearRefreshTimeout, startPolling, stopPolling]);

  const updateTask = useCallback(async (id: string, updates: Partial<Task>) => {
    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:', id, updates);
      
      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      setTasks(prev => prev.map(task => 
        task.id === id ? { ...task, ...updates } : task
      ));

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä—É—Å—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –¥–ª—è API
      const apiUpdates = {
        ...updates,
        status: updates.status ? mapStatusFromRussian(updates.status as TaskStatus) : undefined,
        priority: updates.priority && typeof updates.priority === 'string' ? mapPriorityFromRussian(updates.priority as TaskPriority) : undefined
      };

      const updatedTask = await apiClient.updateTask(id, apiUpdates);
      
      console.log('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', updatedTask.id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      setTasks(prev => prev.map(task => 
        task.id === id ? updatedTask : task
      ));
      
      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è real-time —ç—Ñ—Ñ–µ–∫—Ç–∞
      setTimeout(() => fetchTasks(false), 100);
      
      return updatedTask;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      await fetchTasks(false);
      throw error;
    }
  }, [fetchTasks]);

  const createTask = useCallback(async (taskData: {
    title: string;
    description?: string;
    priority?: string;
    deadline?: string;
    assigneeId?: string;
    assigneeName?: string;
  }) => {
    try {
      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:', taskData.title);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä—É—Å—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –¥–ª—è API
      const apiTaskData: any = { ...taskData };
      
      if (taskData.priority && typeof taskData.priority === 'string') {
        apiTaskData.priority = mapPriorityFromRussian(taskData.priority);
      }
      
      await apiClient.createTask(apiTaskData);
      
      console.log('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è real-time —ç—Ñ—Ñ–µ–∫—Ç–∞
      setTimeout(() => fetchTasks(false), 100);
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
      return false;
    }
  }, [fetchTasks]);

  const deleteTask = async (taskId: string) => {
    try {
      console.log('üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:', taskId);
      
      await apiClient.deleteTask(taskId);
      
      console.log('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞');
      // WebSocket –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ onTaskDeleted
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
    }
  };

  const uploadTaskFile = useCallback(async (taskId: string, file?: File, comment?: string, textContent?: string) => {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏:', taskId);
      
      const result = await apiClient.uploadTaskFile(taskId, file, comment, textContent);
      
      console.log('‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è real-time —ç—Ñ—Ñ–µ–∫—Ç–∞
      setTimeout(() => fetchTasks(false), 100);
      
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
    }
  }, [fetchTasks]);

  return {
    tasks,
    loading,
    error,
    updateTask,
    createTask,
    deleteTask,
    uploadTaskFile,
    refreshTasks: () => fetchTasks(true),
    pausePolling,
    resumePolling,
    isWebSocketConnected: () => true, // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    getWebSocketStatus: () => 'connected', // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º connected
    reconnectWebSocket: () => {} // –ü—É—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  };
};