import { useEffect, useRef, useCallback } from 'react';
import { io, Socket } from 'socket.io-client';
import { useAuth } from '@/contexts/AuthContext';
import { Task } from '@/lib/api';
import { notificationSound } from '@/utils/notifications';

interface UserStatus {
  id: string;
  firstName: string;
  lastName: string;
  patronymic?: string;
  role: string;
  isOnline: boolean;
}

interface WebSocketEvents {
  task_created: (task: Task) => void;
  task_updated: (task: Task) => void;
  task_deleted: (data: { taskId: string }) => void;
  users_status_updated: (users: UserStatus[]) => void;
}

interface UseWebSocketProps {
  onTaskCreated?: (task: Task) => void;
  onTaskUpdated?: (task: Task) => void;
  onTaskDeleted?: (taskId: string) => void;
  onUsersStatusUpdated?: (users: UserStatus[]) => void;
}

export const useWebSocket = ({ onTaskCreated, onTaskUpdated, onTaskDeleted, onUsersStatusUpdated }: UseWebSocketProps = {}) => {
  const socketRef = useRef<Socket | null>(null);
  const { user } = useAuth();
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const heartbeatIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const isConnectedRef = useRef(false);
  const reconnectAttemptsRef = useRef(0);
  const maxReconnectAttempts = 10;
  const baseReconnectDelay = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
  const heartbeatInterval = 30000; // 30 —Å–µ–∫—É–Ω–¥

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ heartbeat
  const startHeartbeat = useCallback(() => {
    if (heartbeatIntervalRef.current) {
      clearInterval(heartbeatIntervalRef.current);
    }
    
    heartbeatIntervalRef.current = setInterval(() => {
      if (socketRef.current?.connected) {
        console.log('üíì –û—Ç–ø—Ä–∞–≤–∫–∞ heartbeat ping');
        socketRef.current.emit('ping');
      } else {
        console.log('‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        connect();
      }
    }, heartbeatInterval);
  }, []);

  const stopHeartbeat = useCallback(() => {
    if (heartbeatIntervalRef.current) {
      clearInterval(heartbeatIntervalRef.current);
      heartbeatIntervalRef.current = null;
    }
  }, []);

  const connect = useCallback(() => {
    if (!user || socketRef.current?.connected) {
      return;
    }

    const token = localStorage.getItem('authToken');
    if (!token) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è WebSocket
    const serverUrl = import.meta.env.VITE_WS_URL || 'https://localhost:3002';
    
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket:', serverUrl);
    
    socketRef.current = io(serverUrl, {
      transports: ['websocket', 'polling'],
      timeout: 20000,
      forceNew: true,
      reconnection: true,
      reconnectionAttempts: 5,
      reconnectionDelay: 1000
    });

    const socket = socketRef.current;

    socket.on('connect', () => {
      console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω:', socket.id);
      isConnectedRef.current = true;
      reconnectAttemptsRef.current = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat
      startHeartbeat();
      
      // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
      socket.emit('authenticate', token);
    });

    socket.on('authenticated', (data) => {
      console.log('‚úÖ WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', data);
    });

    socket.on('authentication_error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebSocket:', error);
    });

    socket.on('disconnect', (reason) => {
      console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω:', reason);
      isConnectedRef.current = false;
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º heartbeat
      stopHeartbeat();
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
      if (reason !== 'io client disconnect' && reconnectAttemptsRef.current < maxReconnectAttempts) {
        const delay = Math.min(baseReconnectDelay * Math.pow(2, reconnectAttemptsRef.current), 30000);
        console.log(`üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay}ms (–ø–æ–ø—ã—Ç–∫–∞ ${reconnectAttemptsRef.current + 1}/${maxReconnectAttempts})`);
        
        reconnectTimeoutRef.current = setTimeout(() => {
          reconnectAttemptsRef.current++;
          connect();
        }, delay);
      } else if (reconnectAttemptsRef.current >= maxReconnectAttempts) {
        console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pong –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    socket.on('pong', () => {
      console.log('üíì –ü–æ–ª—É—á–µ–Ω pong –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
    });

    socket.on('connect_error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error);
      isConnectedRef.current = false;
      
      // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (reconnectAttemptsRef.current < maxReconnectAttempts) {
        const delay = Math.min(baseReconnectDelay * Math.pow(2, reconnectAttemptsRef.current), 30000);
        console.log(`üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —á–µ—Ä–µ–∑ ${delay}ms (–ø–æ–ø—ã—Ç–∫–∞ ${reconnectAttemptsRef.current + 1}/${maxReconnectAttempts})`);
        
        reconnectTimeoutRef.current = setTimeout(() => {
          reconnectAttemptsRef.current++;
          connect();
        }, delay);
      } else {
        console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∑–∞–¥–∞—á
    socket.on('task_created', (task: Task) => {
      console.log('üìù –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞:', task.title);
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∑–≤—É–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ use-tasks.ts
      onTaskCreated?.(task);
    });

    socket.on('task_updated', (task: Task) => {
      console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞:', task.title);
      onTaskUpdated?.(task);
    });

    socket.on('task_deleted', (data: { taskId: string }) => {
      console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞:', data.taskId);
      onTaskDeleted?.(data.taskId);
    });


    
    socket.on('users_status_updated', (users: UserStatus[]) => {
      console.log('üë• –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users);
      onUsersStatusUpdated?.(users);
    });

  }, [user, onTaskCreated, onTaskUpdated, onTaskDeleted, onUsersStatusUpdated]);

  const disconnect = useCallback(() => {
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º heartbeat
    stopHeartbeat();
    
    if (socketRef.current) {
      console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket');
      socketRef.current.disconnect();
      socketRef.current = null;
      isConnectedRef.current = false;
    }
  }, [stopHeartbeat]);

  useEffect(() => {
    if (user) {
      connect();
    } else {
      disconnect();
    }

    return () => {
      disconnect();
    };
  }, [user, connect, disconnect]);

  const isConnected = () => {
    return isConnectedRef.current && socketRef.current?.connected;
  };

  const getConnectionStatus = () => {
    return {
      isConnected: isConnected(),
      reconnectAttempts: reconnectAttemptsRef.current,
      maxReconnectAttempts,
      socketId: socketRef.current?.id || null
    };
  };

  const forceReconnect = useCallback(() => {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket');
    reconnectAttemptsRef.current = 0;
    disconnect();
    setTimeout(() => connect(), 1000);
  }, [connect, disconnect]);

  return {
    isConnected,
    getConnectionStatus,
    connect,
    disconnect,
    forceReconnect
  };
};