const { initializeApp } = require('firebase/app');
const { getFirestore, collection, getDocs } = require('firebase/firestore');
const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

// Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∏–∑ –≤–∞—à–µ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞)
const firebaseConfig = {
  apiKey: "AIzaSyAqqwDawaB7prRaDnHpNx6pwP2_eUYWm0M",
  authDomain: "taskmanager-73f44.firebaseapp.com",
  projectId: "taskmanager-73f44",
  storageBucket: "taskmanager-73f44.firebasestorage.app",
  messagingSenderId: "172331167397",
  appId: "1:172331167397:web:cb16b595840c76bb0a274c",
  measurementId: "G-P8N5Z40QNJ"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Prisma
const prisma = new PrismaClient();

// –ú–∞–ø–ø–∏–Ω–≥ —Ä–æ–ª–µ–π
const mapRole = (firebaseRole) => {
  const roleMap = {
    'user': 'USER',
    'admin': 'ADMIN',
    'boss': 'BOSS'
  };
  return roleMap[firebaseRole] || 'USER';
};

// –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤
const mapStatus = (firebaseStatus) => {
  const statusMap = {
    '–Ω–∞–∑–Ω–∞—á–µ–Ω–æ': 'ASSIGNED',
    '–≤ —Ä–∞–±–æ—Ç–µ': 'IN_PROGRESS',
    '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ': 'COMPLETED',
    '–¥–æ—Ä–∞–±–æ—Ç–∫–∞': 'REVISION'
  };
  return statusMap[firebaseStatus] || 'ASSIGNED';
};

// –ú–∞–ø–ø–∏–Ω–≥ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
const mapPriority = (firebasePriority) => {
  const priorityMap = {
    '–Ω–∏–∑–∫–∏–π': 'LOW',
    '—Å—Ä–µ–¥–Ω–∏–π': 'MEDIUM',
    '–≤—ã—Å–æ–∫–∏–π': 'HIGH'
  };
  return priorityMap[firebasePriority] || 'MEDIUM';
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
const generateTempPassword = () => {
  return Math.random().toString(36).slice(-8);
};

// –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function migrateUsers() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  try {
    const usersSnapshot = await getDocs(collection(db, 'users'));
    const users = [];
    
    for (const doc of usersSnapshot.docs) {
      const userData = doc.data();
      const tempPassword = generateTempPassword();
      const hashedPassword = await bcrypt.hash(tempPassword, 10);
      
      const user = {
        id: doc.id,
        email: userData.email || `user_${doc.id}@example.com`,
        password: hashedPassword,
        firstName: userData.firstName || '–ò–º—è',
        lastName: userData.lastName || '–§–∞–º–∏–ª–∏—è',
        patronymic: userData.patronymic || null,
        role: mapRole(userData.role)
      };
      
      users.push(user);
      console.log(`üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}, –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: ${tempPassword}`);
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ PostgreSQL
    for (const user of users) {
      try {
        await prisma.user.create({
          data: user
        });
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`);
      } catch (error) {
        if (error.code === 'P2002') {
          console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email}:`, error.message);
        }
      }
    }
    
    console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${users.length}`);
    return users;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    throw error;
  }
}

// –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
async function migrateTasks() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∑–∞–¥–∞—á...');
  
  try {
    const tasksSnapshot = await getDocs(collection(db, 'tasks'));
    const tasks = [];
    
    for (const doc of tasksSnapshot.docs) {
      const taskData = doc.data();
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Firebase Timestamp –≤ Date
      const createdAt = taskData.createdAt?.toDate ? taskData.createdAt.toDate() : new Date();
      const updatedAt = taskData.updatedAt?.toDate ? taskData.updatedAt.toDate() : new Date();
      const deadline = taskData.deadline ? new Date(taskData.deadline) : null;
      
      const task = {
        id: doc.id,
        title: taskData.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        description: taskData.description || '',
        priority: mapPriority(taskData.priority),
        deadline: deadline,
        status: mapStatus(taskData.status),
        assigneeId: taskData.assigneeId || null,
        assigneeName: taskData.assigneeName || null,
        createdBy: taskData.createdBy || null,
        updatedBy: taskData.updatedBy || null,
        reportFile: taskData.reportFile ? JSON.stringify(taskData.reportFile) : null,
        createdAt: createdAt,
        updatedAt: updatedAt
      };
      
      tasks.push(task);
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ PostgreSQL
    for (const task of tasks) {
      try {
        await prisma.task.create({
          data: task
        });
        console.log(`‚úÖ –ó–∞–¥–∞—á–∞ "${task.title}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞`);
      } catch (error) {
        if (error.code === 'P2002') {
          console.log(`‚ö†Ô∏è  –ó–∞–¥–∞—á–∞ "${task.title}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ "${task.title}":`, error.message);
        }
      }
    }
    
    console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${tasks.length}`);
    return tasks;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á:', error);
    throw error;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
async function migrate() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ Firebase –≤ PostgreSQL...');
  console.log('=' .repeat(60));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await migrateUsers();
    
    console.log('\n' + '=' .repeat(60));
    
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
    const tasks = await migrateTasks();
    
    console.log('\n' + '=' .repeat(60));
    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    console.log(`   - –ó–∞–¥–∞—á: ${tasks.length}`);
    
    console.log('\nüìã –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
    console.log('   - –î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ (—Å–º. –≤—ã—à–µ)');
    console.log('   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—É–¥—É—Ç —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ');
    console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL');
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
    console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
if (require.main === module) {
  migrate()
    .then(() => {
      console.log('\n‚ú® –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { migrate };