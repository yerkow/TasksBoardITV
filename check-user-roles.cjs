const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkUserRoles() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        firstName: true,
        lastName: true,
        role: true,
        createdAt: true
      },
      orderBy: {
        email: 'asc'
      }
    });
    
    if (users.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n`);
    
    users.forEach((user, index) => {
      console.log(`${index + 1}. üë§ ${user.firstName} ${user.lastName}`);
      console.log(`   üìß Email: ${user.email}`);
      console.log(`   üé≠ –†–æ–ª—å: ${user.role}`);
      console.log(`   üìÖ –°–æ–∑–¥–∞–Ω: ${user.createdAt.toLocaleString('ru-RU')}`);
      console.log(`   üÜî ID: ${user.id}`);
      console.log('');
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
    const roleStats = users.reduce((acc, user) => {
      acc[user.role] = (acc[user.role] || 0) + 1;
      return acc;
    }, {});
    
    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–ª–µ–π:');
    Object.entries(roleStats).forEach(([role, count]) => {
      console.log(`   ${role}: ${count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–ª–µ–π:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkUserRoles();