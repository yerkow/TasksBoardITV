const { spawn } = require('child_process');
const path = require('path');

console.log('üöÄ –ó–∞–ø—É—Å–∫ Task Manager –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...');
console.log('');

// –ó–∞–ø—É—Å–∫–∞–µ–º frontend (Vite)
const frontend = spawn('npm', ['run', 'dev'], {
  cwd: process.cwd(),
  stdio: 'pipe',
  shell: true
});

// –ó–∞–ø—É—Å–∫–∞–µ–º backend (Express)
const backend = spawn('npm', ['run', 'server'], {
  cwd: process.cwd(),
  stdio: 'pipe',
  shell: true
});

let frontendReady = false;
let backendReady = false;
let httpsReady = false;

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ frontend
frontend.stdout.on('data', (data) => {
  const output = data.toString();
  process.stdout.write(output);
  
  if (output.includes('ready in') && !frontendReady) {
    frontendReady = true;
    checkAndShowUrls();
  }
});

frontend.stderr.on('data', (data) => {
  process.stderr.write(data);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ backend
backend.stdout.on('data', (data) => {
  const output = data.toString();
  process.stdout.write(output);
  
  if (output.includes('HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω') && !backendReady) {
    backendReady = true;
    checkAndShowUrls();
  }
  
  if (output.includes('HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω') && !httpsReady) {
    httpsReady = true;
    checkAndShowUrls();
  }
});

backend.stderr.on('data', (data) => {
  process.stderr.write(data);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö URL
function checkAndShowUrls() {
  if (frontendReady && backendReady) {
    setTimeout(() => {
      console.log('');
      console.log('üåê ===== –î–û–°–¢–£–ü–ù–´–ï –ê–î–†–ï–°–ê =====');
      console.log('');
      console.log('üì± FRONTEND (–ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —á–∞—Å—Ç—å):');
      console.log('   üîó HTTP:  http://localhost:8080/');
      console.log('   üîó –°–µ—Ç—å:  http://192.168.8.69:8080/');
      console.log('');
      console.log('üîß BACKEND API:');
      console.log('   üîó HTTP:  http://localhost:3001/api');
      if (httpsReady) {
        console.log('   üîê HTTPS: https://localhost:3002/api');
        console.log('   üîê –°–µ—Ç—å:  https://192.168.8.69:3002/api');
      }
      console.log('');
      console.log('‚úÖ –î–õ–Ø –†–ê–ë–û–¢–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô:');
      if (httpsReady) {
        console.log('   üîê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: https://localhost:3002');
        console.log('   üîê –ò–ª–∏ –≤ —Å–µ—Ç–∏:  https://192.168.8.69:3002');
      } else {
        console.log('   ‚ö†Ô∏è  HTTPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å');
        console.log('   üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node generate-ssl.cjs');
      }
      console.log('');
      console.log('===============================');
      console.log('');
    }, 1000);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  frontend.kill('SIGINT');
  backend.kill('SIGINT');
  process.exit(0);
});

process.on('SIGTERM', () => {
  frontend.kill('SIGTERM');
  backend.kill('SIGTERM');
  process.exit(0);
});

frontend.on('exit', (code) => {
  if (code !== 0) {
    console.log(`‚ùå Frontend –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
  }
});

backend.on('exit', (code) => {
  if (code !== 0) {
    console.log(`‚ùå Backend –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
  }
});